# Generated by Django 2.0.6 on 2018-08-12 15:12

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=8)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BasicInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('ethnicity', models.CharField(choices=[('Black/African descent', 'Black/African descent'), ('Pacific islander', 'Pacific islander'), ('Indian', 'Indian'), ('White/Caucasian', 'White/Caucasian'), ('Mixed', 'Mixed'), ('Middle eastern', 'Middle eastern'), ('Asian', 'Asian'), ('Other', 'Other'), ('Native american', 'Native american'), ('Latino/ hispanic', 'Latino/ hispanic')], max_length=20, null=True)),
                ('religion', models.CharField(choices=[('Hindu', 'Hindu'), ('Buddhist', 'Buddhist'), ('Agnostic', 'Agnostic'), ('Spiritual', 'Spiritual'), ('Orthodox', 'Orthodox'), ('Catholic', 'Catholic'), ('Atheist', 'Atheist'), ('Other', 'Other'), ('Jewish', 'Jewish'), ('Protestant', 'Protestant'), ('Christian', 'Christian'), ('Muslim', 'Muslim')], max_length=20, null=True)),
                ('sign', models.CharField(choices=[('Sagittarius', 'Sagittarius'), ('Virgo', 'Virgo'), ('Gemini', 'Gemini'), ('Pisces', 'Pisces'), ('Capricorn', 'Capricorn'), ('Libra', 'Libra'), ('Cancer', 'Cancer'), ('Aries', 'Aries'), ('Scorpio', 'Scorpio'), ('Leo', 'Leo'), ('Taurus', 'Taurus'), ('Aquarius', 'Aquarius')], max_length=20, null=True)),
                ('body_type', models.CharField(choices=[('A little extra', 'A little extra'), ('Fit', 'Fit'), ('Full-figured', 'Full-figured'), ('Average', 'Average'), ('Better not say', 'Better not say'), ('Curvy', 'Curvy'), ('Overweight', 'Overweight'), ('Thin', 'Thin')], max_length=20, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='basicinfo', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=60)),
                ('slug', models.SlugField(unique=True)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='matchmaker.Category')),
            ],
            options={
                'ordering': ['parent', 'name'],
            },
        ),
        migrations.CreateModel(
            name='HabitInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('smoking', models.CharField(choices=[('Only with alcohol', 'Only with alcohol'), ('Social smoker', 'Social smoker'), ('Trying to quit', 'Trying to quit'), ('Non-smoker', 'Non-smoker'), ('Quit', 'Quit'), ('Smoker', 'Smoker')], max_length=20, null=True)),
                ('drinking', models.CharField(choices=[('Drinking', '\tDrinking'), ('Sometimes', 'Sometimes'), ('Socially', 'Socially'), ('Never', 'Never'), ('Often', 'Often')], max_length=20, null=True)),
                ('drug', models.CharField(choices=[('Often', 'Often'), ('Never', 'Never'), ('Sometimes', 'Sometimes')], max_length=20, null=True)),
                ('diet', models.CharField(choices=[('Vegan', 'Vegan'), ('Kosher', 'Kosher'), ('I eat meat', 'I eat meat'), ('Halal', 'Halal'), ('Vegetarian', 'Vegetarian')], max_length=20, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='habitinfo', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=160)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='matchmaker.Category')),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('messaging', models.PositiveIntegerField(default=5)),
                ('can_see_visitors', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonalInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('children', models.CharField(choices=[('Expecting', 'Expecting'), ('Want kids', 'Want kids'), ('Have kids', 'Have kids'), ("Don't want kids", "Don't want kids"), ('No kids', 'No kids'), ('Someday', 'Someday'), ('Might want kids', 'Might want kids')], max_length=20, null=True)),
                ('pets', models.CharField(choices=[('Other', 'Other'), ('Hate pets', 'Hate pets'), ('Dogs', 'Dogs'), ('Cats', 'Cats')], max_length=20, null=True)),
                ('car', models.BooleanField(default=False)),
                ('home_ownership', models.CharField(choices=[('Live in a dormitory', 'Live in a dormitory'), ('Own a house/apartments', 'Own a house/apartments'), ('Share a flat', 'Share a flat'), ('Rent a house/apartments', 'Rent a house/apartments'), ('Live with parents', 'Live with parents')], max_length=20, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personalinfo', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('image', models.ImageField(upload_to='uploads/user_photos')),
                ('public', models.BooleanField(default=False)),
                ('views', models.PositiveIntegerField(default=0, editable=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userphotos', to=settings.AUTH_USER_MODEL)),
                ('viewed_by', models.ManyToManyField(related_name='photoviewby_list', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProfessionalInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('profession', models.CharField(choices=[('College student', 'College student'), ('Homemaker', 'Homemaker'), ('Apprentice', 'Apprentice'), ('Retired', 'Retired'), ('Employee', 'Employee'), ('Self-employed', 'Self-employed'), ('Civil servant', 'Civil servant'), ('Unemployed', 'Unemployed')], max_length=20, null=True)),
                ('industry', models.CharField(choices=[('Science', 'Science'), ('Non-profit', 'Non-profit'), ('Health care', 'Health care'), ('Education', 'Education'), ('Arts/music/writing', 'Arts/music/writing'), ('Technology', 'Technology'), ('Sales/marketing', 'Sales/marketing'), ('Hospitality', 'Hospitality'), ('Entertainment/media', 'Entertainment/media'), ('Business management', 'Business management'), ('Transportation', 'Transportation'), ('IT', 'IT'), ('Military', 'Military'), ('Government/politics', 'Government/politics'), ('Construction', 'Construction')], max_length=20, null=True)),
                ('education', models.CharField(choices=[('College', 'College'), ("I'm just very smart", "I'm just very smart"), ('Post grad', 'Post grad'), ('Secondary education', 'Secondary education'), ('Not finished', 'Not finished'), ('University', 'University'), ('Apprenticeship', 'Apprenticeship'), ('Advanced degree', 'Advanced degree')], max_length=20, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='professionalinfo', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StatusInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('sexual_orientation', models.CharField(choices=[('Straight', 'Straight'), ('Bisexual', 'Bisexual'), ('Gay', 'Gay')], max_length=20, null=True)),
                ('relationship_status', models.CharField(choices=[('In an open relationship', 'In an open relationship'), ('Single', 'Single'), ('Tell you later', 'Tell you later'), ('Seeing someone', 'Seeing someone'), ('Married', 'Married'), ('Widowed', 'Widowed'), ('Divorced', 'Divorced'), ('Separated', 'Separated')], max_length=20, null=True)),
                ('relationship_type', models.CharField(choices=[('Monogamous', 'Monogamous'), ('Polygamous', 'Polygamous')], max_length=20, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statusinfo', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('about', models.CharField(max_length=160, null=True)),
                ('language', models.CharField(choices=[('en,English', 'en,English'), ('ru,Russian', 'ru,Russian'), ('es,Spanish', 'es,Spanish'), ('br,Portuguese', 'br,Portuguese'), ('tr,Turkish', 'tr,Turkish'), ('fr,French', 'fr,French'), ('id,Indonesian', 'id,Indonesian'), ('se,Swedish', 'se,Swedish'), ('tlTagalog', 'tlTagalog'), ('vi,Vietnamese', 'vi,Vietnamese'), ('it,Italian', 'it,Italian'), ('zh,Chinese', 'zh,Chinese'), ('hi,Hindi', 'hi,Hindi'), ('Ethnicity', 'Ethnicity')], max_length=16, null=True)),
                ('location', models.GenericIPAddressField(null=True)),
                ('city', models.CharField(max_length=20, null=True)),
                ('visitors_view_count', models.PositiveIntegerField(default=0)),
                ('views', models.PositiveIntegerField(default=0, editable=False)),
                ('blockedUsers', models.ManyToManyField(related_name='blockedUsers_set', to=settings.AUTH_USER_MODEL)),
                ('contacts', models.ManyToManyField(related_name='contacts_list', to=settings.AUTH_USER_MODEL)),
                ('interests', models.ManyToManyField(to='matchmaker.Interest')),
                ('membership', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='matchmaker.Membership')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
                ('visitors', models.ManyToManyField(related_name='visitors_list', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='likes',
            name='likedPhotos',
            field=models.ManyToManyField(related_name='likedphotos', to='matchmaker.Photo'),
        ),
        migrations.AddField(
            model_name='likes',
            name='likedUsers',
            field=models.ManyToManyField(related_name='likedusers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='likes',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to=settings.AUTH_USER_MODEL),
        ),
    ]
